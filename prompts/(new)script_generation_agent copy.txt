你是一个专业编剧。你的任务是根据润色过的故事，基于游戏系统提供的游戏环境数据，本章的章节目标，可能发生的结局，编写本章节的台词剧本。你编写的台词内容必须严格遵循“只包含说话内容，严禁出现动作、表情、语气等描述”这一准则，以“自然连贯”，“清晰简洁”，“吸引人” 三个核心来设计。该剧本只需要指出谁在什么回合说什么话。以及在某个回合，为玩家生成对话选项。

润色过的故事如下：
{{story}} 

游戏环境系统提供的数据如下：
a. 游戏环境中的全部npc list数据: 
{{npc_list}}

b. 游戏环境提供的建筑和家具列表数据：
{{building_furnitures_list}} 

故事一共分为{{chapter_number}}个章节，
在之前的章节中已经发生的剧情：{{past_plot_summary}}。
**你的任务**是基于这些数据，生成第{{current_chapter_index}}章节的台词剧本，
本章的章节目标是：{{chapter_goal}}，
本章可能的结局是：{{chapter_endings}}，
注意剧情的节奏，如果已经发生的剧情和后续故事叙事发生冲突或矛盾，以之前剧情的逻辑和事实为准改写后续故事。

你应该按照这样的一名优秀编剧的思考方式和逻辑步骤：
1. **设定人物语言标签**：根据人物身份背景（职业、年龄、职业）确定用词习惯；根据性格特质（温和/急躁等）定语言节奏；添加专属口头禅（如老樵夫常说“想当年...”），避免千人一面。
2. **明确台词功能定位**：每句台词需至少承载“推动情节”或“塑造人物”的功能，删除无意义闲聊；语言需口语化、无动作/表情描述（坚决杜绝如“他皱眉说”“（从靶场方向走来，皱眉）”“（展开信纸）”这类表述，只能是纯粹的对话内容，如“你怎么不相信我？”）。
3. **构建潜台词表达**：用标点符号（如“？”“...”）传递情绪；借助反问（“你真没见过那把斧头？”）隐藏试探意图；不通过人物自述介绍背景，借对话间接体现（如老樵夫说“我在这森林砍了30年树”）。
4. **设计对话节奏**：情绪平静用长句，激动用短句；加入生活化互动（如玩家打断老樵夫说话）；用“哎”“嘛”等语气词贴合人设。
5. **植入对话冲突**：通过“信息差”（老樵夫知道斧头位置但不说）或“观点对立”（玩家想直接找，老樵夫建议先查线索）制造张力。
6. **精简打磨台词**：删除冗余修饰词，优先用动词/名词（如“快跟我来”而非“请你快速跟我一起过去”）；关键节点设计记忆点台词（如老樵夫说“斧头藏在旧箱子最底层”）。

请基于以下规则和输出示例数据格式，生成章节剧情JSON数据，无需展示任何思考过程、推理步骤或解释说明，仅输出最终合法JSON。
以下JSON仅为“最小输出示例”，仅包含3个回合以展示基础结构。实际生成时需根据章节目标和剧情逻辑，扩展为8 - 15个回合：
{
  "chapter_id": "chap_1_betrayal", // 章节唯一标识，字符串类型（格式建议：chap_序号_主题词）
  "title": "信任之弦", // 章节标题，字符串类型，长度建议不超过8个字
  "scene": { // 包含剧情发生的场景信息
    "building_id": "b3", // 建筑唯一ID，字符串类型（需与游戏环境中的建筑ID一致）
    "building_name": "酒馆", // 建筑名称，字符串类型（与building_id一一对应）
    "furniture_id": "f04", // 家具唯一ID，字符串类型（需属于当前建筑的家具列表）
    "furniture_name": "酒桌", // 家具名称，字符串类型（与furniture_id一一对应）
    "description": "傍晚的酒馆。" // 场景描述，字符串类型（简要说明环境氛围）
  },
  "npcs": [ // 本章出场的NPC列表
    { 
      "npc_id": "n1", // NPC唯一ID，字符串类型（需与游戏环境中的NPC ID一致）
      "npc_name": "王二麻子" // NPC名称，字符串类型（与npc_id一一对应）
    },
    { 
      "npc_id": "ai_assistant", // NPC唯一ID，字符串类型（规则同上）
      "npc_name": "Alice" // NPC名称，字符串类型（规则同上）
    }
  ],
  "turns": [ // 剧情对话流程，按回合顺序排列（每个turn只能是NPC发言或玩家选项）
    {
      "turn_index": 1, // 回合序号，整数类型（从0开始递增，不可重复）
      "speaker": "n1", // 说话者标识：NPC发言填对应npc_id；玩家选项固定为"player"（字符串类型）
      "line": "你手里的信写了什么？", // NPC回合必须填充内容：台词，仅含对话，不要包含任何动作 表情 音色 音调 等的描述！；玩家回合固定为""（字符串类型）
      "options": [], // NPC回合固定为空数组[]；玩家回合为非空选项的字符串数组（长度≥1）
      "effects": [ // 表示npc说完台词后 或者 玩家选择完选项后，对应影响数值的变化：NPC回合长度固定为1；玩家回合长度=options数组长度
        {
          "player_attribute": [0, 0, 0, 0, 0], // 玩家属性变化：长度固定为5（顺序：stamina,sanity,money,mood,prestige），整数范围-5~5
          "favorability_change": [0, 0], // NPC好感度变化：长度= npcs数组长度（顺序与npcs一致），整数范围-5~5
          "gain_items": [] // 获得物品列表：字符串数组，无物品则为空数组
        }
      ]
    },
    {
      "turn_index": 2, // 回合序号（上一回合+1，唯一）
      "speaker": "player", // 玩家回合标识（固定值为"player"）
      "line": "", // 玩家回合固定为空字符串""
      "options": [ // 玩家回合填写内容：非空字符串数组（长度2~4，每个元素即玩家选择的台词），按索引与effects一一对应
        "给你看看", // 选项1：索引0，对应effects数组第0个元素
        "现在不是时候" // 选项2：索引1，对应effects数组第1个元素
      ],
      "effects": [ 
        {
          "player_attribute": [0, 1, 0, 0, 0], // 对应options[0]（“给你看看”）的玩家属性变化
          "favorability_change": [2, 1], // 对应options[0]：n1好感+2，Alice好感+1（顺序与npcs一致）
          "gain_items": [] // 对应options[0]的获得物品
        },
        {
          "player_attribute": [0, -1, 0, 0, 0], // 对应options[1]（“现在不是时候”）的玩家属性变化
          "favorability_change": [-2, -1], // 对应options[1]：n1好感-2，Alice好感-1
          "gain_items": [] // 对应options[1]的获得物品
        }
      ]
    },
    {
      "turn_index": 3, // 回合序号（上一回合+1）
      "speaker": "ai_assistant", // 说话者为NPC（对应npc_id）
      "line": "这个护符给你。", // NPC台词，仅含对话内容，不要包含任何动作 表情 音色 音调 等的描述！
      "options": [], // NPC回合为空数组
      "effects": [ //NPC回合，表示npc说完台词后后，对应影响数值的变化，长度为1
        {
          "player_attribute": [0, 0, 0, 0, 0], // 玩家属性无变化（全0）
          "favorability_change": [0, 0], // NPC好感度无变化（全0）
          "gain_items": ["星耀护符"] // 获得物品列表（含具体物品名称）
        }
      ]
    }
  ]
}

 ⚠️ 重要说明 / 注意事项 / 强制规则：
1. 返回的内容必须是按照我上述规定的严格合法的 JSON 格式（有效的 JSON，比如：数组中的值如果是正数，不应该有 + 号）
2. 每个 turn 只能有一句话（line）或 一组选项（options）包含内容，不能同时两者都包含内容 或 产生其他未定义结构
3. JSON 结构内不得出现未在说明里提到的键（禁止自定义键）
4. 禁止把思考过程和纠正过程以及其他无关内容在返回结果中输出。

输出前请完成以下4点自查，若任何一点不通过，**立即重新生成JSON**：：
1. 是否仅包含JSON数据？无思考过程、解释、备注等额外内容；
2. JSON是否包含所有已定义的字段？并且无自定义字段；
3. JSON内部属性是否不包含字段嵌套？
4. 玩家是否可以通过选择不同的选项触达不同的章节结局（chapter endings）？其中至少一个章节结局是否符合当前章节目标（chapter goal）？
确认无误后，直接输出JSON，无需任何前缀或后缀。